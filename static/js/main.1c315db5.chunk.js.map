{"version":3,"sources":["components/Nav/Nav.js","components/NavMessage/NavMessage.js","components/ClickItem/ClickItem.js","components/Container/Container.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","score","topScore","NavMessage","ClickItem","role","id","onClick","clicker","style","backgroundImage","concat","image","Container","children","Footer","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","clickTiles","message","handleIncrement","newScore","setState","selected","gameover","randomizer","data","i","length","j","Math","floor","random","temp","clickT1","map","item","clicked","resetAllTiles","push","console","log","reset","forEach","element","correctGuess","newData","NewTopScore","max","incorrectGuess","bind","assertThisInitialized","_this2","components_Nav_Nav","components_NavMessage_NavMessage","components_Container_Container","components_ClickItem_ClickItem","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c315db5.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\n// import NavMessage from \"../NavMessage\";\r\nimport \"./Nav.css\";\r\n\r\n// Component for Nav Bar: \r\n// using props here will push to Game.js\r\nconst Nav = props => (\r\n<div>\r\n    <nav className=\"jumbotron jumbotron-fluid bg-dark\">\r\n   <div className=\"display-4\">Dragon Ball Z - Clicky Game </div>\r\n    <div className =\"lead\">\r\n            {/* <NavMessage></NavMessage> */}\r\n             Score:{props.score} | Top Score {props.topScore}\r\n    </div>\r\n\r\n    </nav>\r\n</div>\r\n)\r\n\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"./NavMessage.css\";\r\n\r\nconst NavMessage = () =>(\r\n  <div> \r\n    rendering switch message here (not working yet) \r\n</div>\r\n  );\r\n  export default NavMessage;\r\n\r\n//     // updates the state each tile click\r\n//     scoreLogger = (score, topScore) =>{\r\n//         let newState= props.message\r\n//         // if score & topScore are zero then the message is blank, otherwise correct or incorrect\r\n//         if(score === 0 && topScore === 0){\r\n//             newState = \"\";\r\n//         }else if(score !== 0 && topScore > 0){\r\n//             newState = \"correct\";\r\n//         }else{\r\n//             newState = \"incorrect\";\r\n//         } \r\n//         // new state\r\n//         if (score !== this.state.score || this.state.message !== newState.message){\r\n//             this.setState({newState});\r\n//         }\r\n//     }\r\n\r\n//         // const {score, topScore} = this.state.message\r\n\r\n//     // this will be to switch between message options\r\n//     switchMessage = () => {\r\n//             switch(this.state.message){\r\n//             case \"correct\": \r\n//             return \"You guessed correctly!\";\r\n//             case \"incorrect\":\r\n//             return \"you guessed incorrectly! \"\r\n//             default:\r\n//             return \"Click a DBZ Character to begin!\"\r\n//         } \r\n  // NavMessage\r\n \r\n       \r\n//     };\r\n//     // being this should be in the navbar as a list to display\r\n//     //diplaying the messages discribed above\r\n//     render(){\r\n//         return(\r\n//             <div>\r\n//                    rendering switch message here (not working yet) \r\n//                    {this.state.scoreLogger}\r\n//                    {this.state.switchMessage}\r\n               \r\n//             </div>\r\n//         );\r\n//     }\r\n// };\r\n\r\n","import React from \"react\";\r\nimport \"./ClickItem.css\";\r\n\r\n// component variable for the click item \r\nconst ClickItem = props =>(\r\n    \r\n    <div className=\"card animated rubberBand\"\r\n    role = \"img\"\r\n    id = {props.id}\r\n    onClick = {() => props.clicker(props.id)}\r\n    style={{ backgroundImage: `url(\"${props.image}\")` }}>\r\n    {props.id}\r\n    </div>\r\n)\r\n\r\nexport default ClickItem;","import React from \"react\";\r\nimport \"./Container.css\";\r\n\r\n// creating container for the props and children\r\nconst Container = props =>(\r\n    <div className= \"container-fluid\">\r\n        <div className= \"row\">\r\n                {props.children}\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Container;","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\n// footer \r\nconst Footer = () =>(\r\n<nav className=\"navbar fixed-bottom bg-dark\">\r\nJust a Coding BootCamp Required Homework - With an Anime Twist!\r\n<h4>A Ha1f_Deaf Project</h4>\r\n</nav>\r\n);\r\n    \r\n\r\n\r\n\r\nexport default Footer;","import React, {Component} from 'react';\nimport './App.css';\n// importing Game.js component:\n// import Game from \"./components/Game\"\n// importing all other components into this game component\nimport Nav from \"../src/components/Nav\";\nimport NavMessage from \"../src/components/NavMessage\";\nimport ClickItem from \"../src/components/ClickItem\";\nimport Container from \"../src/components/Container\";\nimport Footer from \"../src/components/Footer\";\n// import GameOver from \"../src/components/GameOver\";\n// importing data from tiles json\nimport clickTiles from \"../src/clickTiles.json\"\n\n\n// game state that will have data score and topScore\nclass App extends Component {\n  state = { \n      clickTiles,\n      score: 0,\n      topScore: 0,\n      message: ''\n   }\n   constructor(props) {\n    super(props);\n    this.clicker= this.clicker.bind(this)\n  }\n componentDidMount() {\n     this.setState(\n      {clickTiles:this.randomizer(clickTiles)});\n      // this.correctGuess(),\n      // this.incorrectGuess()\n      this.handleIncrement() //not working\n }\n  \n handleIncrement = () =>{\n     const newScore = this.state.score +1; \n     this.setState({\n         score: newScore, \n         message: \"you got points\"\n     });\n     if (newScore >= this.state.topScore){\n         this.setState({topScore:newScore});\n     }\n     if(newScore === 12) {\n         this.setState({\n             message:\"you've won!\", \n             selected: [],\n            gameover:true\n         })\n     }\n }\n  randomizer = data => {\n      //use let here because i will be restructured\n      let i = data.length - 1;\n      while (i > 0) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = data[i];\n        data[i] = data[j];\n        data[j] = temp;\n        i--;\n      }\n      return data;\n    };\n    \n  clicker = (id )=>{\n      let clickT1 = [];\n      this.state.clickTiles.map((item, i)=>{\n        if(this.clicked === true){\n            // game over calling resetAllTiles\n            this.resetAllTiles()\n        }\n      \n        if (item.id === id){\n            item.clicked = true;\n            clickT1.push(item)\n        }else clickT1.push(item)\n      })\n      console.log(clickT1);\n      // changing state calling randomizer function on the tiles\n      this.setState({clickTiles:this.randomizer(clickT1)})\n    //   console.log(id);\n  }\n\n//   reseting all the tiles\n  resetAllTiles= ()=>{\n    let reset = this.state.clickTiles;\n    this.state.clickTiles.forEach((element, i) => {\n        if (reset[i].clicked === true) {\n            reset[i].clicked = false;\n        }\n    this.setState({clickTiles:reset})\n\n    });\n}\n\n  // function for guessing correctly\n  correctGuess = newData => {\n      let newScore = this.state.score;\n      newScore++\n      let NewTopScore = Math.max(newScore, this.state.topScore);\n\n      this.setState({\n          clickTiles: this.randomizer(newData),\n          score: newScore,\n          topScore: NewTopScore\n      })\n      console.log(\"correctGuess\" + newScore);\n  }\n\n  incorrectGuess = newData => {\n      this.setState({\n          clickTiles: this.randomizer(newData),\n          score:0\n      })\n  }\n  render() { \n      // this will return how the other components will be structured on the page:\n      return ( \n          <div>\n              <Nav>\n                  <NavMessage/> \n                  {/* should add in some kind of props call for these score and topScore */}\n                  Score: {this.state.score} \n                  | \n                  Top Score: {this.state.topScore}\n              </Nav>\n              <Container>\n                  {this.state.clickTiles.map(item =>(\n                      <ClickItem \n                      clicker = {this.clicker }\n                      image = {item.image}\n                      id = {item.id}\n                      key = {item.id}\n                      />\n                      ) \n                  )}\n              </Container>\n              <Footer/>\n          </div>\n       );\n  }\n\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\n\n// not sure what serviceWorker does...\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}